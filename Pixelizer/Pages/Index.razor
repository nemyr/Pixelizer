@page "/"
@using Components;
@using Pixelizer.Classes;
@using Pixelizer.Data;

<PageTitle>Index</PageTitle>
<MudGrid>
    <MudItem xs="12">
        <FileUploader OnFileChange="UploadFiles" />
    </MudItem>
    <MudItem xs="4">
        <MudCheckBox @bind-Checked="settings.UseGrayscale"> Use grayscale </MudCheckBox>
        <MudCheckBox @bind-Checked="settings.UsePalette"> Use palette </MudCheckBox>
    </MudItem>
    <MudItem xs="4">
        <MudSlider T="int" @bind-Value="settings.Colors" Min="2" Max="15" Step="1" Disabled="@(!settings.UsePalette)">
            Number of colors: @settings.Colors.ToString()
        </MudSlider>
        
    </MudItem>
    <MudItem xs="4">
        <MudSlider T="int" @bind-Value="settings.Width" Min="10" Max="80">
            Width: @settings.Width
        </MudSlider>
        <MudSlider T="int" @bind-Value="settings.Height" Min="10" Max="80">
            Height: @settings.Height
        </MudSlider>
    </MudItem>
    <MudItem xs="12">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" OnClick="ProcessImage" Disabled="@DisableProcess">Process</MudButton>
    </MudItem>
    <MudItem xs="6">
        <MudImage Src="@SourceImage" Height="400"> </MudImage>
    </MudItem>
    <MudItem xs="6">
        <MudImage Src="@ResultImage" Height="400"> </MudImage>
    </MudItem>
    <MudItem xs="12">
        <MudGrid Justify="Justify.FlexStart">
            @if (imageProcessor != null)
                @foreach (var color in imageProcessor.Palette)
                {
                    <MudItem xs="1">
                        <MudPaper Height="10px" Class="d-flex flex-column align-center justify-center mud-width-full py-8" Style="@($"background:rgb({color.R}, {color.G}, {color.B});")"></MudPaper>
                    </MudItem>
                }
        </MudGrid>
    </MudItem>
</MudGrid>

@code{
    public ProcessingSettings settings = new ProcessingSettings();
    private ImageProcessor imageProcessor;
    private bool DisableProcess = true;

    string SourceImage = "Files/placeholder.png";
    string ResultImage = "Files/placeholder.png";

    private async Task UploadFiles(FileData fileData)
    {
        try
        {
            SourceImage = ByteArrayToImage(fileData.Data.ToArray(), Path.GetExtension(fileData.FileName).Replace(".",""));
            imageProcessor = new ImageProcessor(settings, fileData);
            ResultImage = imageProcessor.ProcessImage().AsBase64();
            DisableProcess = false;
        } catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private string ByteArrayToImage(byte[] source, string extension)
    {
        string result = Convert.ToBase64String(source);
        return $"data:image/{extension};base64,{result}";
    }

    private void ProcessImage()
    {
        if (imageProcessor == null)
            return;
        ResultImage = imageProcessor.ProcessImage().AsBase64();
        StateHasChanged();
    }
}