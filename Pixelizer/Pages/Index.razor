@page "/"
@using System.Drawing;
@using System.Drawing.Imaging;
@using Components;
@using Pixelizer.Classes;
@using Pixelizer.Data;

<PageTitle>Index</PageTitle>
<MudGrid>
    <MudItem xs="12">
        <FileUploader OnFileChange="UploadFiles" />
    </MudItem>
    <MudItem xs="4">
        <MudSlider T="float" @bind-Value="settings.GrayscaleLevels.Red" Max="1.0f" Step="0.01f">
            Red: @settings.GrayscaleLevels.Red.ToString("F2")
        </MudSlider>
        <MudSlider T="float" @bind-Value="settings.GrayscaleLevels.Green" Max="1.0f" Step="0.01f">
            Green: @settings.GrayscaleLevels.Green.ToString("F2")
        </MudSlider>
        <MudSlider T="float" @bind-Value="settings.GrayscaleLevels.Blue" Max="1.0f" Step="0.01f">
            Blue: @settings.GrayscaleLevels.Blue.ToString("F2")
        </MudSlider>
    </MudItem>

    <MudItem xs="8">
        <MudButton OnClick="ProcessImage">process</MudButton>
    </MudItem>
    <MudItem xs="12">
        @if (imageProcessor != null)
            @foreach (var color in imageProcessor.Palette)
            {
                <MudPaper Width="20" Height="10" Class="d-flex flex-column align-center justify-center mud-width-full py-8" Style="@($"background:#{color.ToArgb().ToString("X")};")"></MudPaper>
            }
    </MudItem>

    <MudItem xs="6">
        <MudImage Src="@SourceImage" Height="400"> </MudImage>
    </MudItem>
    <MudItem xs="6">
        <MudImage Src="@ResultImage" Height="400"> </MudImage>
    </MudItem>
    
</MudGrid>

@code{
    public ProcessingSettings settings = new ProcessingSettings();
    private ImageProcessor imageProcessor; 

    string SourceImage = "Files/placeholder.png";
    string ResultImage = "Files/placeholder.png";

    private async Task UploadFiles(FileData fileData)
    {
        try
        {
            SourceImage = ByteArrayToImage(fileData.Data.ToArray(), Path.GetExtension(fileData.FileName).Replace(".",""));
            imageProcessor = new ImageProcessor(settings, fileData);
            ResultImage = imageProcessor.ProcessImage().AsBase64();
            //ProcessImage(fileData.Data);
        } catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private string ByteArrayToImage(byte[] source, string extension)
    {
        string result = Convert.ToBase64String(source);
        return $"data:image/{extension};base64,{result}";
    }

    private void ProcessImage()
    {
        if (imageProcessor == null)
            return;
        ResultImage = imageProcessor.ProcessImage().AsBase64();
        StateHasChanged();
    }
}