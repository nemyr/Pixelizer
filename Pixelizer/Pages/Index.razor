@page "/"

<PageTitle>Index</PageTitle>

<MudGrid>
    <MudItem xs="12">
        <InputFile id="uploadFileInp" OnChange="async (e) => await UploadFiles(e)" hidden />
        <MudFileUpload T="IBrowserFile" >
            <ButtonTemplate>
                <MudButton HtmlTag="label"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           StartIcon="@Icons.Material.Filled.CloudUpload"
                           for="uploadFileInp">
                        Upload Files
                </MudButton>
            </ButtonTemplate>
        </MudFileUpload>
    </MudItem>
    <MudItem xs="6">
        <MudImage Src="@SourceImage" Height="400"> </MudImage>
    </MudItem>
    <MudItem xs="6">
        <MudImage Src="@ResultImage" Height="400"> </MudImage>
    </MudItem>
</MudGrid>

@code{
    string SourceImage = "Files/placeholder.png";
    string ResultImage = "Files/placeholder.png";

    IBrowserFile file = null;
    byte[] uploadedData;

    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            var readStream = file.OpenReadStream(file.Size);
            uploadedData = new byte[file.Size];

            int sum = 0;
            int count;

            while ((count = await readStream.ReadAsync(uploadedData, sum, (int) file.Size - sum)) > 0)
                sum += count;

            SourceImage = ByteArrayToImage(uploadedData, Path.GetExtension(file.Name).Replace(".",""));
        } catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private string ByteArrayToImage(byte[] source, string extension)
    {
        string result = Convert.ToBase64String(source);
        return $"data:image/{extension};base64,{result}";
    }
}