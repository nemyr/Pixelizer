@page "/"
@using System.Drawing;
@using System.Drawing.Imaging;
@using Components;
@using Pixelizer.Classes;
@using Pixelizer.Data;

<PageTitle>Index</PageTitle>
<MudGrid>
    <MudItem xs="12">
        <FileUploader OnFileChange="UploadFiles" />
    </MudItem>
    <MudItem xs="4">
        <MudSlider T="float" @bind-Value="settings.GrayscaleLevels.Red" Max="1.0f" Step="0.01f">
            Red: @settings.GrayscaleLevels.Red.ToString("F2")
        </MudSlider>
        <MudSlider T="float" @bind-Value="settings.GrayscaleLevels.Green" Max="1.0f" Step="0.01f">
            Green: @settings.GrayscaleLevels.Green.ToString("F2")
        </MudSlider>
        <MudSlider T="float" @bind-Value="settings.GrayscaleLevels.Blue" Max="1.0f" Step="0.01f">
            Blue: @settings.GrayscaleLevels.Blue.ToString("F2")
        </MudSlider>
    </MudItem>

    <MudItem xs="8">
        <MudButton OnClick="ProcessImage">process</MudButton>
    </MudItem>

    <MudItem xs="6">
        <MudImage Src="@SourceImage" Height="400"> </MudImage>
    </MudItem>
    <MudItem xs="6">
        <MudImage Src="@ResultImage" Height="400"> </MudImage>
    </MudItem>
</MudGrid>

@code{
    public ProcessingSettings settings = new ProcessingSettings();
    private ImageProcessor imageProcessor; 

    string SourceImage = "Files/placeholder.png";
    string ResultImage = "Files/placeholder.png";

    private async Task UploadFiles(FileData fileData)
    {
        try
        {
            SourceImage = ByteArrayToImage(fileData.Data.ToArray(), Path.GetExtension(fileData.FileName).Replace(".",""));
            imageProcessor = new ImageProcessor(settings, fileData);
            ResultImage = imageProcessor.ProcessImage().AsBase64();
            //ProcessImage(fileData.Data);
        } catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private string ByteArrayToImage(byte[] source, string extension)
    {
        string result = Convert.ToBase64String(source);
        return $"data:image/{extension};base64,{result}";
    }

    private void ProcessImage()
    {
        if (imageProcessor == null)
            return;
        ResultImage = imageProcessor.ProcessImage().AsBase64();
        /*
        int quality = 75;

        using var bm = new Bitmap(System.Drawing.Image.FromStream(imgStream));
        using var graphics = Graphics.FromImage(bm);
        System.Drawing.Color col = System.Drawing.Color.FromArgb(0x000000);
        Brush br = new SolidBrush(bm.Palette.Entries.FirstOrDefault(col));
        var p = new Pen(br);
        //p.Width = 100;

        graphics.CompositingQuality = System.Drawing.Drawing2D.CompositingQuality.HighSpeed;
        graphics.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.Bicubic;
        graphics.CompositingMode = System.Drawing.Drawing2D.CompositingMode.SourceCopy;
        for (int x = 0; x < bm.Width; x++)
            for(int y = 0; y < bm.Height; y++)
            {
                var px = bm.GetPixel(x, y);
                var c = (px.R + px.G + px.B) / 3f;
                var t = System.Drawing.Color.FromArgb( 
                    (int)(settings.GrayscaleLevels.Red /3f * c), 
                    (int)(settings.GrayscaleLevels.Green /3f * c),
                    (int)(settings.GrayscaleLevels.Blue /3f * c));
                bm.SetPixel(x, y, t);
            }
//      graphics.DrawRectangle(p, 1, 1, 100, 100);

        using var output = new MemoryStream();

        var qualityParamId = Encoder.Quality;
        var encoderParameters = new EncoderParameters(1);
        encoderParameters.Param[0] = new EncoderParameter(qualityParamId, quality);

        var codec = ImageCodecInfo.GetImageDecoders()
            .FirstOrDefault(codec => codec.FormatID == ImageFormat.Jpeg.Guid);

        bm.Save(output, codec, encoderParameters);

        ResultImage = ByteArrayToImage(output.ToArray(), codec.FormatDescription);
        */
    }
}